#!/bin/bash -e

# Usage: dockerize <context>
# Starts a docker container based on <context>
#
# If the image for `context` has already been build, it is pulled from the GitLab container registry and started
# Otherwise, it is first built, then pushed to the container registry, then started
# The current working directory is mounted on `/build` and is the current working directory inside the container
# A subset of the current environment is transferred to the container (see `environment` for details)
#
# The tag on the image will be `slug`-`rev`, where `slug` is the basename of the context, and rev is the hash of the git commit when the context was last updated. 
# For example, if `context` is `build/docker/my-build-environment`, which was last updated by git commit `a1b2c3d`, the image will be tagged with `my-build-environment-a1b2c3d`


_SCRIPT_ROOT=$(realpath "${0}")
_SCRIPT_ROOT=$(dirname "${_SCRIPT_ROOT}")

_BUILD_DOCKER_CONTEXT=${1}
_BUILD_DOCKER_TAG_BASE=$(basename "${_BUILD_DOCKER_CONTEXT}")

_DOCKER_WORKDIR=${2}

_DOCKER_IMAGE_GIT_REVISION=$("${_SCRIPT_ROOT}"/docker_revision "${_BUILD_DOCKER_CONTEXT}")
_DOCKER_IMAGE_TAG=${CI_REGISTRY_IMAGE}:${_BUILD_DOCKER_TAG_BASE}-${_DOCKER_IMAGE_GIT_REVISION}
_DOCKER_ENVIRONMENT_FILE=$(pwd)/docker-bootstrap-environment.txt

_DOCKER=${DOCKER:-/usr/bin/docker}

"${_DOCKER}" login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY_IMAGE}" 1>&2
("${_DOCKER}" pull "${_DOCKER_IMAGE_TAG}" 1>&2) || ("${_SCRIPT_ROOT}"/build "${_DOCKER}" "${_DOCKER_IMAGE_TAG}" "${_BUILD_DOCKER_CONTEXT}" "${_SCRIPT_ROOT}"/runner 1>&2)
"${_SCRIPT_ROOT}"/environment > "${_DOCKER_ENVIRONMENT_FILE}"
"${_DOCKER}" run --interactive --tty --detach --volume "$(pwd)":/build --workdir /build/"${_DOCKER_WORKDIR}" --env-file  "${_DOCKER_ENVIRONMENT_FILE}" "${_DOCKER_IMAGE_TAG}" $(id -u)
